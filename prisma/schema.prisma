generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id       Int     @id(map: "address_pk") @default(autoincrement())
  streetId Int
  cityId   Int
  stateId  Int
  street   street  @relation(fields: [streetId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "address_fk0")
  city     city    @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "address_fk1")
  state    state   @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "address_fk2")
  users    user[]
}

model city {
  id      Int       @id(map: "city_pk") @default(autoincrement())
  stateId Int
  name    String    @db.VarChar
  address address[]
  state   state     @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "city_fk0")
  street  street[]
}

model platform {
  id    Int     @id(map: "consoles_pk") @default(autoincrement())
  name  String  @unique @db.VarChar
  games game[]
}

model exchanges {
  id                                   Int        @id(map: "exchanges_pk") @default(autoincrement())
  desiredGameId                        Int
  offeredGameId                        Int
  status                               String     @default("REQUIRED")
  createdAt                            DateTime   @db.Timestamp(6)  @default(now())
  updatedAt                            DateTime   @db.Timestamp(6)  @default(now())
  desiredGame                          game       @relation("desired", fields: [desiredGameId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exchanges_fk0")
  offeredGame                          game       @relation("offered", fields: [offeredGameId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exchanges_fk1")
}

model favorite {
  id     Int   @id(map: "favorits_pk") @default(autoincrement())
  userId Int
  gameId Int
  users  user @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorits_fk0")
  games  game @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorits_fk1")
}

model game {
  id                                       Int            @id(map: "games_pk") @default(autoincrement())
  ownerId                                  Int
  consoleId                                Int
  name                                     String         @db.VarChar
  image                                    String
  where_is_desired                         exchanges[]    @relation("desired")
  where_is_offered                         exchanges[]    @relation("offered")
  favorits                                 favorite[]
  owner                                    user           @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "games_fk0")
  platform                                 platform       @relation(fields: [consoleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "games_fk1")
}

model state {
  id      Int       @id(map: "state_pk") @default(autoincrement())
  name    String    @db.VarChar
  address address[]
  city    city[]
}

model street {
  id      Int       @id(map: "street_pk") @default(autoincrement())
  cityId  Int
  name    String    @db.VarChar
  address address[]
  city    city      @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "street_fk0")
}

model session {
  id      Int       @id(map: "sessions_pk") @default(autoincrement())
  userId  Int       @unique
  token   String
  user   user       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sessions_fk0")
}

model user {
  id                Int        @id(map: "users_pk") @default(autoincrement())
  name              String     @db.VarChar
  email             String     @unique @db.VarChar
  password          String
  phone             String     @db.VarChar(255)
  addressId         Int
  image             String?
  favorites         favorite[]
  games             game[]
  session           session?
  notifications     notifications[]
  address   address    @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_fk0")
}

model notifications {
  id        Int        @id(map: "notifications_pk") @default(autoincrement())
  userId    Int
  message   String     @db.VarChar(255)
  user      user       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_fk0")
}
